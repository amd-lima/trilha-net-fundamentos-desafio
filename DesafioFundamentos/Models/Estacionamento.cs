namespace DesafioFundamentos.Models
{
    public class Estacionamento
    {
        private decimal precoInicial = 0;
        private decimal precoPorHora = 0;
        private List<string> veiculos = new List<string>();

        Colors colors = new Colors();

        public Estacionamento(decimal precoInicial, decimal precoPorHora)
        {
            this.precoInicial = precoInicial;
            this.precoPorHora = precoPorHora;
        }

        public void AdicionarVeiculo()
        {
            string placa;

            do
            {
                colors.SetColor("Cyan");
                Console.WriteLine("Digite a placa do ve칤culo para estacionar:");
                placa = Console.ReadLine().ToUpper();

                if (veiculos.Any(x => x.ToUpper() == placa))
                {
                    colors.SetColor("Red");
                    Console.WriteLine("Esse ve칤culo j치 est치 estacionado. Digite outra placa.\n");
                    colors.SetColor("White");
                }
                // Verifica se a string n칚o esta vazia
                else if (string.IsNullOrEmpty(placa))
                {
                    colors.SetColor("Red");
                    Console.WriteLine("Placa inv치lida. Digite uma placa v치lida.\n");
                    colors.SetColor("White");
                }

            } while (string.IsNullOrWhiteSpace(placa) || veiculos.Any(x => x.ToUpper() == placa));

            veiculos.Add(placa);
        }

        public void RemoverVeiculo()
        {
            colors.SetColor("Cyan");
            Console.WriteLine("Digite a placa do ve칤culo para remover:");

            string placa = "";
            placa = Console.ReadLine().ToUpper();

            // Verifica se o ve칤culo existe
            if (veiculos.Any(x => x == placa))
            {
                colors.SetColor("Cyan");
                Console.WriteLine("Digite a quantidade de horas que o ve칤culo permaneceu estacionado:");
                colors.SetColor("White");

                int horas = 0;
                while (!int.TryParse(Console.ReadLine(), out horas) || horas < 0)
                {
                    colors.SetColor("Red");
                    Console.WriteLine("Valor inv치lido. Digite um n칰mero v치lido:");
                    colors.SetColor("White");
                }

                decimal valorTotal = 0;
                valorTotal = precoInicial + precoPorHora * horas;


                veiculos.Remove(placa);
                colors.SetColor("Green");
                Console.WriteLine($"O ve칤culo {placa} foi removido e o pre칞o total foi de: R$ {valorTotal:F2}");
            }
            else
            {
                colors.SetColor("Red");
                Console.WriteLine("Desculpe, esse ve칤culo n칚o est치 estacionado aqui. Confira se digitou a placa corretamente");
            }
        }

        public void ListarVeiculos()
        {
            // Verifica se h치 ve칤culos no estacionamento
            if (veiculos.Any())
            {
                Console.WriteLine("Os ve칤culos estacionados s칚o:");

                foreach (string veiculo in veiculos)
                {
                    Console.WriteLine("游댳 " + veiculo);
                }
            }
            else
            {
                Console.WriteLine("N칚o h치 ve칤culos estacionados.");
            }
            colors.SetColor("lightGray");
            Console.WriteLine("Total de ve칤culos estacionados: " + veiculos.Count);
        }
    }
}
